/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  fragment UserFragment on User {\n    id\n    nickname\n    avatar\n    isMe\n  }\n": types.UserFragmentFragmentDoc,
    "\n  fragment PhotoFragment on Photo {\n      id\n      file\n      likes\n      commentNumber\n      isLiked\n  }\n": types.PhotoFragmentFragmentDoc,
    "\n  fragment CommentFragment on Comment {\n      id\n      payload\n      isMine\n      createdAt\n  }\n": types.CommentFragmentFragmentDoc,
    "\n  query me {\n    me {\n      id\n      name\n      avatar\n    }\n  }\n": types.MeDocument,
    "\n  query seeFeed($offset: Int!) {\n    seeFeed(offset: $offset) {\n      id\n      user {\n        nickname\n        avatar\n      }\n      file\n      caption\n      likes\n      commentNumber\n      createdAt\n      isMine\n      isLiked\n      comments {\n        id\n        payload\n        user {\n          nickname\n        }\n        createdAt\n      }\n    }\n  }\n": types.SeeFeedDocument,
    "\n  mutation toggleLike($id: Int!) {\n    toggleLike(id: $id) {\n      ok\n      error\n    }\n  }\n": types.ToggleLikeDocument,
    "\n  mutation createComment($photoId: Int!, $payload: String!) {\n    createComment(photoId: $photoId, payload: $payload) {\n      ok \n      error\n      id\n    }\n  }\n": types.CreateCommentDocument,
    "\n  mutation editComment($id: Int!, $payload: String!) {\n    editComment(id: $id, payload: $payload) {\n      ok \n      error\n    }\n  }\n": types.EditCommentDocument,
    "\n  mutation deleteComment($id: Int!) {\n    deleteComment(id: $id) {\n      ok\n      error\n    }\n  }\n": types.DeleteCommentDocument,
    "\n  \n  \n  query seeProfile($nickname: String!, $page: Int!) {\n    seeProfile(nickname: $nickname) {\n      ...UserFragment\n      name\n      bio\n      isFollowing\n      totalFollowing\n      totalFollowers\n      photos(page: $page) {\n        ...PhotoFragment\n      }\n    }\n  }\n": types.SeeProfileDocument,
    "\n  mutation toggleFollow($nickname: String!) {\n    toggleFollow(nickname: $nickname){\n      ok\n      error\n    }\n  }\n": types.ToggleFollowDocument,
    "\n  mutation login($nickname: String!, $password: String!) {\n    login(nickname: $nickname, password: $password) {\n      ok\n      token\n      error\n    }\n  }\n": types.LoginDocument,
    "\n  mutation createAccount(\n    $name: String!,\n    $nickname: String!,\n    $email: String!\n    $password: String!\n  ) {\n    createAccount(\n      name: $name,\n      nickname: $nickname,\n      email: $email,\n      password: $password\n    ) {\n      ok\n      error\n    }\n  }\n": types.CreateAccountDocument,
};

export function graphql(source: "\n  fragment UserFragment on User {\n    id\n    nickname\n    avatar\n    isMe\n  }\n"): (typeof documents)["\n  fragment UserFragment on User {\n    id\n    nickname\n    avatar\n    isMe\n  }\n"];
export function graphql(source: "\n  fragment PhotoFragment on Photo {\n      id\n      file\n      likes\n      commentNumber\n      isLiked\n  }\n"): (typeof documents)["\n  fragment PhotoFragment on Photo {\n      id\n      file\n      likes\n      commentNumber\n      isLiked\n  }\n"];
export function graphql(source: "\n  fragment CommentFragment on Comment {\n      id\n      payload\n      isMine\n      createdAt\n  }\n"): (typeof documents)["\n  fragment CommentFragment on Comment {\n      id\n      payload\n      isMine\n      createdAt\n  }\n"];
export function graphql(source: "\n  query me {\n    me {\n      id\n      name\n      avatar\n    }\n  }\n"): (typeof documents)["\n  query me {\n    me {\n      id\n      name\n      avatar\n    }\n  }\n"];
export function graphql(source: "\n  query seeFeed($offset: Int!) {\n    seeFeed(offset: $offset) {\n      id\n      user {\n        nickname\n        avatar\n      }\n      file\n      caption\n      likes\n      commentNumber\n      createdAt\n      isMine\n      isLiked\n      comments {\n        id\n        payload\n        user {\n          nickname\n        }\n        createdAt\n      }\n    }\n  }\n"): (typeof documents)["\n  query seeFeed($offset: Int!) {\n    seeFeed(offset: $offset) {\n      id\n      user {\n        nickname\n        avatar\n      }\n      file\n      caption\n      likes\n      commentNumber\n      createdAt\n      isMine\n      isLiked\n      comments {\n        id\n        payload\n        user {\n          nickname\n        }\n        createdAt\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation toggleLike($id: Int!) {\n    toggleLike(id: $id) {\n      ok\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation toggleLike($id: Int!) {\n    toggleLike(id: $id) {\n      ok\n      error\n    }\n  }\n"];
export function graphql(source: "\n  mutation createComment($photoId: Int!, $payload: String!) {\n    createComment(photoId: $photoId, payload: $payload) {\n      ok \n      error\n      id\n    }\n  }\n"): (typeof documents)["\n  mutation createComment($photoId: Int!, $payload: String!) {\n    createComment(photoId: $photoId, payload: $payload) {\n      ok \n      error\n      id\n    }\n  }\n"];
export function graphql(source: "\n  mutation editComment($id: Int!, $payload: String!) {\n    editComment(id: $id, payload: $payload) {\n      ok \n      error\n    }\n  }\n"): (typeof documents)["\n  mutation editComment($id: Int!, $payload: String!) {\n    editComment(id: $id, payload: $payload) {\n      ok \n      error\n    }\n  }\n"];
export function graphql(source: "\n  mutation deleteComment($id: Int!) {\n    deleteComment(id: $id) {\n      ok\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation deleteComment($id: Int!) {\n    deleteComment(id: $id) {\n      ok\n      error\n    }\n  }\n"];
export function graphql(source: "\n  \n  \n  query seeProfile($nickname: String!, $page: Int!) {\n    seeProfile(nickname: $nickname) {\n      ...UserFragment\n      name\n      bio\n      isFollowing\n      totalFollowing\n      totalFollowers\n      photos(page: $page) {\n        ...PhotoFragment\n      }\n    }\n  }\n"): (typeof documents)["\n  \n  \n  query seeProfile($nickname: String!, $page: Int!) {\n    seeProfile(nickname: $nickname) {\n      ...UserFragment\n      name\n      bio\n      isFollowing\n      totalFollowing\n      totalFollowers\n      photos(page: $page) {\n        ...PhotoFragment\n      }\n    }\n  }\n"];
export function graphql(source: "\n  mutation toggleFollow($nickname: String!) {\n    toggleFollow(nickname: $nickname){\n      ok\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation toggleFollow($nickname: String!) {\n    toggleFollow(nickname: $nickname){\n      ok\n      error\n    }\n  }\n"];
export function graphql(source: "\n  mutation login($nickname: String!, $password: String!) {\n    login(nickname: $nickname, password: $password) {\n      ok\n      token\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation login($nickname: String!, $password: String!) {\n    login(nickname: $nickname, password: $password) {\n      ok\n      token\n      error\n    }\n  }\n"];
export function graphql(source: "\n  mutation createAccount(\n    $name: String!,\n    $nickname: String!,\n    $email: String!\n    $password: String!\n  ) {\n    createAccount(\n      name: $name,\n      nickname: $nickname,\n      email: $email,\n      password: $password\n    ) {\n      ok\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation createAccount(\n    $name: String!,\n    $nickname: String!,\n    $email: String!\n    $password: String!\n  ) {\n    createAccount(\n      name: $name,\n      nickname: $nickname,\n      email: $email,\n      password: $password\n    ) {\n      ok\n      error\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;